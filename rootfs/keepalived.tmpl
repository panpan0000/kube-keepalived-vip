{{ $iface := .iface }}{{ $netmask := .netmask }}
{{ $L7VIP := .L7VIP }}
{{ $delayLoop := .delay_loop }}
global_defs {
  vrrp_version 3
  vrrp_iptables {{ .iptablesChain }}
  #get rid of warning:  default user 'keepalived_script' for script execution does not exist - please create
  script_user root
  enable_script_security

}

{{ if not .l7vipIsEmpty }}
## L7 Instance
    vrrp_instance ingress {
      interface {{ $iface }}
      state BACKUP
      virtual_router_id {{ .vrid_ingress }}
      priority {{ .priority_ingress }}
      # so that it will respect the priority even boot up order diffs, but may cause jitter
      preempt
      # at least relief the jitter a little bit
      preempt_delay 1
      advert_int 1

      track_interface {
        {{ $iface }}
      }

      authentication {
            auth_type PASS
            auth_pass dce-ingr
      }

      virtual_ipaddress {
        {{ $L7VIP }} dev {{ $iface }}
      }
      {{ $OneEndPoint := index .l7eps 0  }}
      # strategic routing table. enable when as backup, clean when as master
      # NOTE: <DANGEROUS> here, we assume the real server are all using the same http/https port!!
      notify_backup "/routing.sh BACKUP  {{ $L7VIP }} {{ $iface }} {{ $OneEndPoint.HttpPort }} {{ $OneEndPoint.HttpsPort }}"
      notify_master "/routing.sh MASTER  {{ $L7VIP }} {{ $iface }} {{ $OneEndPoint.HttpPort }} {{ $OneEndPoint.HttpsPort }}"
    }
# HTTP
    virtual_server {{ $L7VIP }} {{ .L7HttpPort }} {
        delay_loop 5
        lvs_sched wlc
        lvs_method NAT
        persistence_timeout 60
        protocol TCP

        {{ range $i, $ep := .l7eps }}
        real_server {{ $ep.Ip }} {{ $ep.HttpPort }} {
          weight  {{ $ep.Weight }}
          alpha
          TCP_CHECK {
            connect_port {{ $ep.HttpPort}}
            connect_timeout 3
            delay_before_retry 1
          }
          HTTP_GET {
              url {
                  status_code 404
                  path /
              }
              connect_timeout 3
              delay_before_retry 3
          }
        }
        {{ end }}
    }
# HTTPS
    virtual_server {{ $L7VIP }} {{ .L7HttpsPort }} {
        delay_loop 5
        lvs_sched wlc
        lvs_method NAT
        persistence_timeout 60
        protocol TCP

        {{ range $i, $ep := .l7eps }}
        real_server {{ $ep.Ip }} {{ $ep.HttpsPort }} {
          weight {{ $ep.Weight }}
          alpha
          TCP_CHECK {
            connect_port {{ $ep.HttpsPort}}
            connect_timeout 3
            delay_before_retry 1
          }
          SSL_GET {
              url {
                  status_code 404
                  path /
              }
              connect_timeout 3
              delay_before_retry 3
          }
        }
        {{ end }}
    }



{{ end }}

##//////////////////////////////////////////////////



#Check if the VIP list is empty
{{ if not .vipIsEmpty }}

    {{ if .proxyMode }}
    vrrp_script chk_haproxy {
      script "/haproxy-check.sh"
      interval 1
    }
    {{ end }}

   
    #######################################
    vrrp_instance vips {
      state BACKUP
      interface {{ $iface }}
      virtual_router_id {{ .vrid }}
      priority {{ .priority }}
      preempt
      advert_int 1

      track_interface {
        {{ $iface }}
      }

      authentication {
            auth_type PASS
            auth_pass dce-l4
      }

      {{ if .notify }} notify {{ .notify }} {{ end }}

      {{ if .useUnicast }}
      unicast_src_ip {{ .myIP }}
      unicast_peer { {{ range .nodes }}
        {{ . }}{{ end }}
      }
      {{ end }}

      virtual_ipaddress { 
        {{ range .vips }}
            {{ . }}  dev {{ $iface }}
        {{ end }}
      }

      notify /keepalived-check.sh

    {{ if .proxyMode }}
      # In proxy mode there is no need to create virtual servers
      track_script {
        chk_haproxy
      }
    {{ end }}

    }

    {{ if not .proxyMode }}
        {{ range $i, $svc := .svcs }}
            {{ if eq $svc.LVSMethod "VIP" }}
                # VIP Service with no pods: {{ $svc.IP }}
            {{ else }}
            # Service: {{ $svc.Name }}
            virtual_server {{ $svc.IP }} {{ $svc.ExternalPort }} {
              delay_loop {{ $delayLoop }}
              lvs_sched {{ $svc.LbMethod }}
              lvs_method {{ $svc.LVSMethod }}
              persistence_timeout {{ $svc.PersistenceTimeout  }}
              protocol {{ $svc.Protocol }}

              {{ range $j, $backend := $svc.Backends }}
              real_server {{ $backend.IP }} {{ $svc.ContainerPort }} {
                weight 1
                TCP_CHECK {
                  connect_port {{ $svc.ContainerPort }}
                  connect_timeout 3
                }
              }
              {{ end }}
            }
        {{ end }}
    {{ end }}

#End if vip list is empty
    {{ end }}
{{ end }}
